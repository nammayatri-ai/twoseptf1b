name: Build and Deploy

on:
  push:
    branches:
      - main

env:
  SERVER_BASE_URL: ${{ secrets.SERVER_BASE_URL }}
  DOMAIN_NAME: twoseptf1b
  NAMESPACE: utils

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Check and create ECR repository if needed
        id: create-repository
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
          ECR_NAMESPACE: ${{ vars.AWS_ECR_NAMESPACE }}
          ECR_REPOSITORY: ${{ github.event.repository.name }}
        run: |
          if ! aws ecr describe-repositories --repository-names "$ECR_NAMESPACE/$ECR_REPOSITORY" --region $AWS_REGION 2>/dev/null; then
            echo "Repository does not exist. Creating it now..."
            aws ecr create-repository --repository-name "$ECR_NAMESPACE/$ECR_REPOSITORY" --region $AWS_REGION
            echo "Repository created successfully."
          else
            echo "Repository already exists."
          fi
            
      - name: Build and push Docker image
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_NAMESPACE: ${{ vars.AWS_ECR_NAMESPACE }}
          ECR_REPOSITORY: ${{ github.event.repository.name }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Check if Dockerfile exists
          if [ ! -f "Dockerfile" ]; then
            echo "Error: Dockerfile not found. Please ensure your repository has a Dockerfile or contact support."
            exit 1
          fi
          
          docker build -t $ECR_REGISTRY/$ECR_NAMESPACE/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_NAMESPACE/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_NAMESPACE/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Read deployment config
        id: config
        run: |
          if [ -f "deploy-config.json" ]; then
            CONFIG=$(cat deploy-config.json | jq -c '.')
            echo "config<<EOF" >> $GITHUB_OUTPUT
            echo "$CONFIG" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
            echo "Config loaded successfully."
          else
            echo "Error: deploy-config.json not found."
            exit 1
          fi

      - name: Check if deployment exists via API
        id: check-deployment
        run: |
          echo "=== DEBUG: Environment Variables ==="
          echo "DOMAIN_NAME: ${{ env.DOMAIN_NAME }}"
          echo "NAMESPACE: ${{ env.NAMESPACE }}"
          echo "SERVER_BASE_URL: ${{ env.SERVER_BASE_URL }}"
          echo "SERVER_API_TOKEN length: $(echo '${{ secrets.SERVER_API_TOKEN }}' | wc -c)"
          echo "SERVER_API_TOKEN first 10 chars: $(echo '${{ secrets.SERVER_API_TOKEN }}' | cut -c1-10)"
          echo "=== END DEBUG ==="
          
          # Prepare the request data
          REQUEST_DATA='{"name":"${{ env.DOMAIN_NAME }}","namespace":"${{ env.NAMESPACE }}"}'
          # Hardcode the URL for testing
          API_URL="https://columellar-rudolf-forgetfully.ngrok-free.dev/api/deployment/exists"
          
          echo "=== API REQUEST DEBUG ==="
          echo "Request URL: $API_URL"
          echo "Request Data: $REQUEST_DATA"
          echo "Content-Type: application/json"
          echo "Authorization: Bearer [REDACTED]"
          echo "=== END API REQUEST DEBUG ==="
          
          # Test server connectivity first
          echo "=== TESTING SERVER CONNECTIVITY ==="
          HEALTH_URL="https://columellar-rudolf-forgetfully.ngrok-free.dev/"
          echo "Testing health endpoint: $HEALTH_URL"
          HEALTH_RESPONSE=$(curl -s -w "HTTP_CODE:%{http_code}" "$HEALTH_URL")
          echo "Health check response: $HEALTH_RESPONSE"
          echo "=== END SERVER CONNECTIVITY TEST ==="
          
          # Make the API call with detailed error handling
          echo "Making API call..."
          HTTP_CODE=$(curl -s -w "%{http_code}" -o /tmp/api_response.json -X POST \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${{ secrets.SERVER_API_TOKEN }}" \
            -d "$REQUEST_DATA" \
            "$API_URL")
          
          echo "=== API RESPONSE DEBUG ==="
          echo "HTTP Status Code: $HTTP_CODE"
          echo "Response Body:"
          cat /tmp/api_response.json
          echo ""
          echo "=== END API RESPONSE DEBUG ==="
          
          # Handle different HTTP status codes
          case $HTTP_CODE in
            200)
              echo "API call successful (200)"
              ;;
            401)
              echo "ERROR: Unauthorized (401) - Check API token"
              exit 1
              ;;
            404)
              echo "ERROR: Not Found (404) - Check API endpoint URL"
              exit 1
              ;;
            500)
              echo "ERROR: Internal Server Error (500) - Check server logs"
              exit 1
              ;;
            *)
              echo "ERROR: Unexpected HTTP status code: $HTTP_CODE"
              exit 1
              ;;
          esac
          
          # Parse the response
          if [ -f /tmp/api_response.json ]; then
            if echo "$(cat /tmp/api_response.json)" | jq . &>/dev/null; then
              echo "Response is valid JSON"
              EXISTS=$(cat /tmp/api_response.json | jq -r 'if has("exists") then .exists else "false" end')
              
              if [ "$EXISTS" = "null" ]; then
                EXISTS="false"
              fi
            else
              echo "ERROR: Response is not valid JSON"
              echo "Raw response: $(cat /tmp/api_response.json)"
              EXISTS="false"
            fi
          else
            echo "ERROR: No response file found"
            EXISTS="false"
          fi
          
          echo "Final deployment exists value: $EXISTS"
          echo "exists=$EXISTS" >> $GITHUB_OUTPUT
          
          # Cleanup
          rm -f /tmp/api_response.json
      
      - name: Apply config via API if deployment does not exist
        if: steps.check-deployment.outputs.exists == 'false'
        env:
          CONFIG: ${{ steps.config.outputs.config }}
          IMAGE: ${{ steps.build-image.outputs.image }}
        run: |
          UPDATED_CONFIG=$(echo $CONFIG | jq --arg img "$IMAGE" '.image = $img')
          
          curl -X POST \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${{ secrets.SERVER_API_TOKEN }}" \
            -d "{\"config\": $UPDATED_CONFIG}" \
            ${{ env.SERVER_BASE_URL }}/api/deployment/apply-config

      - name: Call API to patch deployment
        if: steps.check-deployment.outputs.exists == 'true'
        env:
          IMAGE: ${{ steps.build-image.outputs.image }}
        run: |
          curl -X POST \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${{ secrets.SERVER_API_TOKEN }}" \
            -d "{\"deployment\": \"${{ env.DOMAIN_NAME }}\", \"namespace\": \"${{ env.NAMESPACE }}\", \"image\": \"$IMAGE\"}" \
            ${{ env.SERVER_BASE_URL }}/api/deployment/patch